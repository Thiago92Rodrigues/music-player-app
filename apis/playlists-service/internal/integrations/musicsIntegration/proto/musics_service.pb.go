// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: protos/musics_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Genre int32

const (
	Genre_Heavy_Metal  Genre = 0
	Genre_Folk_Metal   Genre = 1
	Genre_Power_Metal  Genre = 2
	Genre_Death_Metal  Genre = 3
	Genre_Thrash_Metal Genre = 4
	Genre_Black_Metal  Genre = 5
)

// Enum value maps for Genre.
var (
	Genre_name = map[int32]string{
		0: "Heavy_Metal",
		1: "Folk_Metal",
		2: "Power_Metal",
		3: "Death_Metal",
		4: "Thrash_Metal",
		5: "Black_Metal",
	}
	Genre_value = map[string]int32{
		"Heavy_Metal":  0,
		"Folk_Metal":   1,
		"Power_Metal":  2,
		"Death_Metal":  3,
		"Thrash_Metal": 4,
		"Black_Metal":  5,
	}
)

func (x Genre) Enum() *Genre {
	p := new(Genre)
	*p = x
	return p
}

func (x Genre) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Genre) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_musics_service_proto_enumTypes[0].Descriptor()
}

func (Genre) Type() protoreflect.EnumType {
	return &file_protos_musics_service_proto_enumTypes[0]
}

func (x Genre) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Genre.Descriptor instead.
func (Genre) EnumDescriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{0}
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{0}
}

func (x *Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Music struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Duration  int32    `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	File      string   `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Composers []string `protobuf:"bytes,5,rep,name=composers,proto3" json:"composers,omitempty"`
	Lyrics    string   `protobuf:"bytes,6,opt,name=lyrics,proto3" json:"lyrics,omitempty"`
	AlbumId   string   `protobuf:"bytes,7,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	ArtistId  string   `protobuf:"bytes,8,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
	Views     int32    `protobuf:"varint,9,opt,name=views,proto3" json:"views,omitempty"`
}

func (x *Music) Reset() {
	*x = Music{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Music) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Music) ProtoMessage() {}

func (x *Music) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Music.ProtoReflect.Descriptor instead.
func (*Music) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{1}
}

func (x *Music) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Music) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Music) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Music) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Music) GetComposers() []string {
	if x != nil {
		return x.Composers
	}
	return nil
}

func (x *Music) GetLyrics() string {
	if x != nil {
		return x.Lyrics
	}
	return ""
}

func (x *Music) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *Music) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *Music) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

type MusicsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Musics []*Music `protobuf:"bytes,1,rep,name=musics,proto3" json:"musics,omitempty"`
}

func (x *MusicsList) Reset() {
	*x = MusicsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicsList) ProtoMessage() {}

func (x *MusicsList) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicsList.ProtoReflect.Descriptor instead.
func (*MusicsList) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{2}
}

func (x *MusicsList) GetMusics() []*Music {
	if x != nil {
		return x.Musics
	}
	return nil
}

type CreateMusicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Duration  int32    `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	File      string   `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Composers []string `protobuf:"bytes,4,rep,name=composers,proto3" json:"composers,omitempty"`
	Lyrics    string   `protobuf:"bytes,5,opt,name=lyrics,proto3" json:"lyrics,omitempty"`
	AlbumId   string   `protobuf:"bytes,6,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	ArtistId  string   `protobuf:"bytes,7,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
}

func (x *CreateMusicRequest) Reset() {
	*x = CreateMusicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMusicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMusicRequest) ProtoMessage() {}

func (x *CreateMusicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMusicRequest.ProtoReflect.Descriptor instead.
func (*CreateMusicRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateMusicRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateMusicRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateMusicRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *CreateMusicRequest) GetComposers() []string {
	if x != nil {
		return x.Composers
	}
	return nil
}

func (x *CreateMusicRequest) GetLyrics() string {
	if x != nil {
		return x.Lyrics
	}
	return ""
}

func (x *CreateMusicRequest) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *CreateMusicRequest) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

type UpdateMusicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Duration  int32    `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	File      string   `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Composers []string `protobuf:"bytes,5,rep,name=composers,proto3" json:"composers,omitempty"`
	Lyrics    string   `protobuf:"bytes,6,opt,name=lyrics,proto3" json:"lyrics,omitempty"`
	AlbumId   string   `protobuf:"bytes,7,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	ArtistId  string   `protobuf:"bytes,8,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
}

func (x *UpdateMusicRequest) Reset() {
	*x = UpdateMusicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMusicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMusicRequest) ProtoMessage() {}

func (x *UpdateMusicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMusicRequest.ProtoReflect.Descriptor instead.
func (*UpdateMusicRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateMusicRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateMusicRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateMusicRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UpdateMusicRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *UpdateMusicRequest) GetComposers() []string {
	if x != nil {
		return x.Composers
	}
	return nil
}

func (x *UpdateMusicRequest) GetLyrics() string {
	if x != nil {
		return x.Lyrics
	}
	return ""
}

func (x *UpdateMusicRequest) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

func (x *UpdateMusicRequest) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

type GetMostViewedMusicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetMostViewedMusicsRequest) Reset() {
	*x = GetMostViewedMusicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMostViewedMusicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMostViewedMusicsRequest) ProtoMessage() {}

func (x *GetMostViewedMusicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMostViewedMusicsRequest.ProtoReflect.Descriptor instead.
func (*GetMostViewedMusicsRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetMostViewedMusicsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMostViewedMusicsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseDate int64    `protobuf:"varint,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Cover       string   `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	Studio      string   `protobuf:"bytes,5,opt,name=studio,proto3" json:"studio,omitempty"`
	Producers   []string `protobuf:"bytes,6,rep,name=producers,proto3" json:"producers,omitempty"`
	ArtistId    string   `protobuf:"bytes,7,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
	Tracks      []*Music `protobuf:"bytes,8,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{6}
}

func (x *Album) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Album) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Album) GetReleaseDate() int64 {
	if x != nil {
		return x.ReleaseDate
	}
	return 0
}

func (x *Album) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Album) GetStudio() string {
	if x != nil {
		return x.Studio
	}
	return ""
}

func (x *Album) GetProducers() []string {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *Album) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *Album) GetTracks() []*Music {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type AlbumsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Albums []*Album `protobuf:"bytes,1,rep,name=albums,proto3" json:"albums,omitempty"`
}

func (x *AlbumsList) Reset() {
	*x = AlbumsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumsList) ProtoMessage() {}

func (x *AlbumsList) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumsList.ProtoReflect.Descriptor instead.
func (*AlbumsList) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{7}
}

func (x *AlbumsList) GetAlbums() []*Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

type CreateAlbumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseDate int64    `protobuf:"varint,2,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Cover       string   `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	Studio      string   `protobuf:"bytes,4,opt,name=studio,proto3" json:"studio,omitempty"`
	Producers   []string `protobuf:"bytes,5,rep,name=producers,proto3" json:"producers,omitempty"`
	ArtistId    string   `protobuf:"bytes,6,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
}

func (x *CreateAlbumRequest) Reset() {
	*x = CreateAlbumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlbumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlbumRequest) ProtoMessage() {}

func (x *CreateAlbumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlbumRequest.ProtoReflect.Descriptor instead.
func (*CreateAlbumRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAlbumRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAlbumRequest) GetReleaseDate() int64 {
	if x != nil {
		return x.ReleaseDate
	}
	return 0
}

func (x *CreateAlbumRequest) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *CreateAlbumRequest) GetStudio() string {
	if x != nil {
		return x.Studio
	}
	return ""
}

func (x *CreateAlbumRequest) GetProducers() []string {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *CreateAlbumRequest) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

type UpdateAlbumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseDate int64    `protobuf:"varint,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Cover       string   `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	Studio      string   `protobuf:"bytes,5,opt,name=studio,proto3" json:"studio,omitempty"`
	Producers   []string `protobuf:"bytes,6,rep,name=producers,proto3" json:"producers,omitempty"`
	ArtistId    string   `protobuf:"bytes,7,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
}

func (x *UpdateAlbumRequest) Reset() {
	*x = UpdateAlbumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlbumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlbumRequest) ProtoMessage() {}

func (x *UpdateAlbumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlbumRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlbumRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAlbumRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAlbumRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAlbumRequest) GetReleaseDate() int64 {
	if x != nil {
		return x.ReleaseDate
	}
	return 0
}

func (x *UpdateAlbumRequest) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *UpdateAlbumRequest) GetStudio() string {
	if x != nil {
		return x.Studio
	}
	return ""
}

func (x *UpdateAlbumRequest) GetProducers() []string {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *UpdateAlbumRequest) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

type GetMostRecentAlbumsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetMostRecentAlbumsRequest) Reset() {
	*x = GetMostRecentAlbumsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMostRecentAlbumsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMostRecentAlbumsRequest) ProtoMessage() {}

func (x *GetMostRecentAlbumsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMostRecentAlbumsRequest.ProtoReflect.Descriptor instead.
func (*GetMostRecentAlbumsRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetMostRecentAlbumsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMostRecentAlbumsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country        string   `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	FoundationDate int64    `protobuf:"varint,4,opt,name=foundation_date,json=foundationDate,proto3" json:"foundation_date,omitempty"`
	Members        []string `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
	Description    string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Genre          Genre    `protobuf:"varint,7,opt,name=genre,proto3,enum=proto.Genre" json:"genre,omitempty"`
	Photos         []string `protobuf:"bytes,8,rep,name=photos,proto3" json:"photos,omitempty"`
	FacebookUrl    string   `protobuf:"bytes,9,opt,name=facebook_url,json=facebookUrl,proto3" json:"facebook_url,omitempty"`
	TwitterUrl     string   `protobuf:"bytes,10,opt,name=twitter_url,json=twitterUrl,proto3" json:"twitter_url,omitempty"`
	InstagramUrl   string   `protobuf:"bytes,11,opt,name=instagram_url,json=instagramUrl,proto3" json:"instagram_url,omitempty"`
	WikipediaUrl   string   `protobuf:"bytes,12,opt,name=wikipedia_url,json=wikipediaUrl,proto3" json:"wikipedia_url,omitempty"`
	Font           string   `protobuf:"bytes,13,opt,name=font,proto3" json:"font,omitempty"`
	Favorites      int32    `protobuf:"varint,14,opt,name=favorites,proto3" json:"favorites,omitempty"`
	Followers      int32    `protobuf:"varint,15,opt,name=followers,proto3" json:"followers,omitempty"`
	Albums         []*Album `protobuf:"bytes,16,rep,name=albums,proto3" json:"albums,omitempty"`
	PopularTracks  []*Music `protobuf:"bytes,17,rep,name=popular_tracks,json=popularTracks,proto3" json:"popular_tracks,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{11}
}

func (x *Artist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Artist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Artist) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Artist) GetFoundationDate() int64 {
	if x != nil {
		return x.FoundationDate
	}
	return 0
}

func (x *Artist) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Artist) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Artist) GetGenre() Genre {
	if x != nil {
		return x.Genre
	}
	return Genre_Heavy_Metal
}

func (x *Artist) GetPhotos() []string {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *Artist) GetFacebookUrl() string {
	if x != nil {
		return x.FacebookUrl
	}
	return ""
}

func (x *Artist) GetTwitterUrl() string {
	if x != nil {
		return x.TwitterUrl
	}
	return ""
}

func (x *Artist) GetInstagramUrl() string {
	if x != nil {
		return x.InstagramUrl
	}
	return ""
}

func (x *Artist) GetWikipediaUrl() string {
	if x != nil {
		return x.WikipediaUrl
	}
	return ""
}

func (x *Artist) GetFont() string {
	if x != nil {
		return x.Font
	}
	return ""
}

func (x *Artist) GetFavorites() int32 {
	if x != nil {
		return x.Favorites
	}
	return 0
}

func (x *Artist) GetFollowers() int32 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *Artist) GetAlbums() []*Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

func (x *Artist) GetPopularTracks() []*Music {
	if x != nil {
		return x.PopularTracks
	}
	return nil
}

type ArtistsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*Artist `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *ArtistsList) Reset() {
	*x = ArtistsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistsList) ProtoMessage() {}

func (x *ArtistsList) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistsList.ProtoReflect.Descriptor instead.
func (*ArtistsList) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{12}
}

func (x *ArtistsList) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type GetArtistsByGenreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genre Genre `protobuf:"varint,1,opt,name=genre,proto3,enum=proto.Genre" json:"genre,omitempty"`
}

func (x *GetArtistsByGenreRequest) Reset() {
	*x = GetArtistsByGenreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtistsByGenreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistsByGenreRequest) ProtoMessage() {}

func (x *GetArtistsByGenreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistsByGenreRequest.ProtoReflect.Descriptor instead.
func (*GetArtistsByGenreRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetArtistsByGenreRequest) GetGenre() Genre {
	if x != nil {
		return x.Genre
	}
	return Genre_Heavy_Metal
}

type CreateArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Country        string   `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	FoundationDate int64    `protobuf:"varint,3,opt,name=foundation_date,json=foundationDate,proto3" json:"foundation_date,omitempty"`
	Members        []string `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	Description    string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Genre          Genre    `protobuf:"varint,6,opt,name=genre,proto3,enum=proto.Genre" json:"genre,omitempty"`
	Photos         []string `protobuf:"bytes,7,rep,name=photos,proto3" json:"photos,omitempty"`
	FacebookUrl    string   `protobuf:"bytes,8,opt,name=facebook_url,json=facebookUrl,proto3" json:"facebook_url,omitempty"`
	TwitterUrl     string   `protobuf:"bytes,9,opt,name=twitter_url,json=twitterUrl,proto3" json:"twitter_url,omitempty"`
	InstagramUrl   string   `protobuf:"bytes,10,opt,name=instagram_url,json=instagramUrl,proto3" json:"instagram_url,omitempty"`
	WikipediaUrl   string   `protobuf:"bytes,11,opt,name=wikipedia_url,json=wikipediaUrl,proto3" json:"wikipedia_url,omitempty"`
	Font           string   `protobuf:"bytes,12,opt,name=font,proto3" json:"font,omitempty"`
}

func (x *CreateArtistRequest) Reset() {
	*x = CreateArtistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtistRequest) ProtoMessage() {}

func (x *CreateArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtistRequest.ProtoReflect.Descriptor instead.
func (*CreateArtistRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{14}
}

func (x *CreateArtistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateArtistRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateArtistRequest) GetFoundationDate() int64 {
	if x != nil {
		return x.FoundationDate
	}
	return 0
}

func (x *CreateArtistRequest) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CreateArtistRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateArtistRequest) GetGenre() Genre {
	if x != nil {
		return x.Genre
	}
	return Genre_Heavy_Metal
}

func (x *CreateArtistRequest) GetPhotos() []string {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *CreateArtistRequest) GetFacebookUrl() string {
	if x != nil {
		return x.FacebookUrl
	}
	return ""
}

func (x *CreateArtistRequest) GetTwitterUrl() string {
	if x != nil {
		return x.TwitterUrl
	}
	return ""
}

func (x *CreateArtistRequest) GetInstagramUrl() string {
	if x != nil {
		return x.InstagramUrl
	}
	return ""
}

func (x *CreateArtistRequest) GetWikipediaUrl() string {
	if x != nil {
		return x.WikipediaUrl
	}
	return ""
}

func (x *CreateArtistRequest) GetFont() string {
	if x != nil {
		return x.Font
	}
	return ""
}

type UpdateArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country        string   `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	FoundationDate int64    `protobuf:"varint,4,opt,name=foundation_date,json=foundationDate,proto3" json:"foundation_date,omitempty"`
	Members        []string `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
	Description    string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Genre          Genre    `protobuf:"varint,7,opt,name=genre,proto3,enum=proto.Genre" json:"genre,omitempty"`
	Photos         []string `protobuf:"bytes,8,rep,name=photos,proto3" json:"photos,omitempty"`
	FacebookUrl    string   `protobuf:"bytes,9,opt,name=facebook_url,json=facebookUrl,proto3" json:"facebook_url,omitempty"`
	TwitterUrl     string   `protobuf:"bytes,10,opt,name=twitter_url,json=twitterUrl,proto3" json:"twitter_url,omitempty"`
	InstagramUrl   string   `protobuf:"bytes,11,opt,name=instagram_url,json=instagramUrl,proto3" json:"instagram_url,omitempty"`
	WikipediaUrl   string   `protobuf:"bytes,12,opt,name=wikipedia_url,json=wikipediaUrl,proto3" json:"wikipedia_url,omitempty"`
	Font           string   `protobuf:"bytes,13,opt,name=font,proto3" json:"font,omitempty"`
}

func (x *UpdateArtistRequest) Reset() {
	*x = UpdateArtistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArtistRequest) ProtoMessage() {}

func (x *UpdateArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArtistRequest.ProtoReflect.Descriptor instead.
func (*UpdateArtistRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateArtistRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateArtistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateArtistRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateArtistRequest) GetFoundationDate() int64 {
	if x != nil {
		return x.FoundationDate
	}
	return 0
}

func (x *UpdateArtistRequest) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *UpdateArtistRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateArtistRequest) GetGenre() Genre {
	if x != nil {
		return x.Genre
	}
	return Genre_Heavy_Metal
}

func (x *UpdateArtistRequest) GetPhotos() []string {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *UpdateArtistRequest) GetFacebookUrl() string {
	if x != nil {
		return x.FacebookUrl
	}
	return ""
}

func (x *UpdateArtistRequest) GetTwitterUrl() string {
	if x != nil {
		return x.TwitterUrl
	}
	return ""
}

func (x *UpdateArtistRequest) GetInstagramUrl() string {
	if x != nil {
		return x.InstagramUrl
	}
	return ""
}

func (x *UpdateArtistRequest) GetWikipediaUrl() string {
	if x != nil {
		return x.WikipediaUrl
	}
	return ""
}

func (x *UpdateArtistRequest) GetFont() string {
	if x != nil {
		return x.Font
	}
	return ""
}

type GetMostFollowedArtistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetMostFollowedArtistsRequest) Reset() {
	*x = GetMostFollowedArtistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMostFollowedArtistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMostFollowedArtistsRequest) ProtoMessage() {}

func (x *GetMostFollowedArtistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMostFollowedArtistsRequest.ProtoReflect.Descriptor instead.
func (*GetMostFollowedArtistsRequest) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetMostFollowedArtistsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMostFollowedArtistsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_musics_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protos_musics_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protos_musics_service_proto_rawDescGZIP(), []int{17}
}

var File_protos_musics_service_proto protoreflect.FileDescriptor

var file_protos_musics_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x05, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x79, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x32,
	0x0a, 0x0a, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x79, 0x72, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0xd8, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x79, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x05, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x52, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22,
	0xc4, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0xa0, 0x04, 0x0a, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x05, 0x67,
	0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69,
	0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73,
	0x12, 0x33, 0x0a, 0x0e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x0d, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x36, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0x3e, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x22, 0x86, 0x03,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x22, 0x96, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x05,
	0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x6f, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x22,
	0x4d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2a, 0x6d, 0x0a, 0x05, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x76, 0x79, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x6b, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x6c,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x4d, 0x65, 0x74, 0x61,
	0x6c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x4d, 0x65,
	0x74, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x4d,
	0x65, 0x74, 0x61, 0x6c, 0x10, 0x05, 0x32, 0x92, 0x0a, 0x0a, 0x06, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x73, 0x12, 0x25, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x09, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x09, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x12, 0x09, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x25, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x09, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x73, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x09, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x27, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x09,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x29, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x12, 0x09, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a,
	0x0e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12,
	0x09, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x10, 0x55,
	0x6e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12,
	0x09, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0c, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x09, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0e, 0x55, 0x6e, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x09, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protos_musics_service_proto_rawDescOnce sync.Once
	file_protos_musics_service_proto_rawDescData = file_protos_musics_service_proto_rawDesc
)

func file_protos_musics_service_proto_rawDescGZIP() []byte {
	file_protos_musics_service_proto_rawDescOnce.Do(func() {
		file_protos_musics_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_musics_service_proto_rawDescData)
	})
	return file_protos_musics_service_proto_rawDescData
}

var file_protos_musics_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_musics_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_protos_musics_service_proto_goTypes = []interface{}{
	(Genre)(0),                            // 0: proto.Genre
	(*Id)(nil),                            // 1: proto.Id
	(*Music)(nil),                         // 2: proto.Music
	(*MusicsList)(nil),                    // 3: proto.MusicsList
	(*CreateMusicRequest)(nil),            // 4: proto.CreateMusicRequest
	(*UpdateMusicRequest)(nil),            // 5: proto.UpdateMusicRequest
	(*GetMostViewedMusicsRequest)(nil),    // 6: proto.GetMostViewedMusicsRequest
	(*Album)(nil),                         // 7: proto.Album
	(*AlbumsList)(nil),                    // 8: proto.AlbumsList
	(*CreateAlbumRequest)(nil),            // 9: proto.CreateAlbumRequest
	(*UpdateAlbumRequest)(nil),            // 10: proto.UpdateAlbumRequest
	(*GetMostRecentAlbumsRequest)(nil),    // 11: proto.GetMostRecentAlbumsRequest
	(*Artist)(nil),                        // 12: proto.Artist
	(*ArtistsList)(nil),                   // 13: proto.ArtistsList
	(*GetArtistsByGenreRequest)(nil),      // 14: proto.GetArtistsByGenreRequest
	(*CreateArtistRequest)(nil),           // 15: proto.CreateArtistRequest
	(*UpdateArtistRequest)(nil),           // 16: proto.UpdateArtistRequest
	(*GetMostFollowedArtistsRequest)(nil), // 17: proto.GetMostFollowedArtistsRequest
	(*Empty)(nil),                         // 18: proto.Empty
}
var file_protos_musics_service_proto_depIdxs = []int32{
	2,  // 0: proto.MusicsList.musics:type_name -> proto.Music
	2,  // 1: proto.Album.tracks:type_name -> proto.Music
	7,  // 2: proto.AlbumsList.albums:type_name -> proto.Album
	0,  // 3: proto.Artist.genre:type_name -> proto.Genre
	7,  // 4: proto.Artist.albums:type_name -> proto.Album
	2,  // 5: proto.Artist.popular_tracks:type_name -> proto.Music
	12, // 6: proto.ArtistsList.artists:type_name -> proto.Artist
	0,  // 7: proto.GetArtistsByGenreRequest.genre:type_name -> proto.Genre
	0,  // 8: proto.CreateArtistRequest.genre:type_name -> proto.Genre
	0,  // 9: proto.UpdateArtistRequest.genre:type_name -> proto.Genre
	1,  // 10: proto.Musics.GetMusic:input_type -> proto.Id
	18, // 11: proto.Musics.GetMusics:input_type -> proto.Empty
	4,  // 12: proto.Musics.CreateMusic:input_type -> proto.CreateMusicRequest
	5,  // 13: proto.Musics.UpdateMusic:input_type -> proto.UpdateMusicRequest
	1,  // 14: proto.Musics.DeleteMusic:input_type -> proto.Id
	1,  // 15: proto.Musics.ViewMusic:input_type -> proto.Id
	6,  // 16: proto.Musics.GetMostViewedMusics:input_type -> proto.GetMostViewedMusicsRequest
	1,  // 17: proto.Musics.GetAlbum:input_type -> proto.Id
	18, // 18: proto.Musics.GetAlbums:input_type -> proto.Empty
	9,  // 19: proto.Musics.CreateAlbum:input_type -> proto.CreateAlbumRequest
	10, // 20: proto.Musics.UpdateAlbum:input_type -> proto.UpdateAlbumRequest
	1,  // 21: proto.Musics.DeleteAlbum:input_type -> proto.Id
	11, // 22: proto.Musics.GetMostRecentAlbums:input_type -> proto.GetMostRecentAlbumsRequest
	1,  // 23: proto.Musics.GetArtist:input_type -> proto.Id
	18, // 24: proto.Musics.GetArtists:input_type -> proto.Empty
	14, // 25: proto.Musics.GetArtistsByGenre:input_type -> proto.GetArtistsByGenreRequest
	15, // 26: proto.Musics.CreateArtist:input_type -> proto.CreateArtistRequest
	16, // 27: proto.Musics.UpdateArtist:input_type -> proto.UpdateArtistRequest
	1,  // 28: proto.Musics.DeleteArtist:input_type -> proto.Id
	1,  // 29: proto.Musics.FavoriteArtist:input_type -> proto.Id
	1,  // 30: proto.Musics.UnfavoriteArtist:input_type -> proto.Id
	1,  // 31: proto.Musics.FollowArtist:input_type -> proto.Id
	1,  // 32: proto.Musics.UnfollowArtist:input_type -> proto.Id
	17, // 33: proto.Musics.GetMostFollowedArtists:input_type -> proto.GetMostFollowedArtistsRequest
	2,  // 34: proto.Musics.GetMusic:output_type -> proto.Music
	3,  // 35: proto.Musics.GetMusics:output_type -> proto.MusicsList
	2,  // 36: proto.Musics.CreateMusic:output_type -> proto.Music
	2,  // 37: proto.Musics.UpdateMusic:output_type -> proto.Music
	18, // 38: proto.Musics.DeleteMusic:output_type -> proto.Empty
	2,  // 39: proto.Musics.ViewMusic:output_type -> proto.Music
	3,  // 40: proto.Musics.GetMostViewedMusics:output_type -> proto.MusicsList
	7,  // 41: proto.Musics.GetAlbum:output_type -> proto.Album
	8,  // 42: proto.Musics.GetAlbums:output_type -> proto.AlbumsList
	7,  // 43: proto.Musics.CreateAlbum:output_type -> proto.Album
	7,  // 44: proto.Musics.UpdateAlbum:output_type -> proto.Album
	18, // 45: proto.Musics.DeleteAlbum:output_type -> proto.Empty
	8,  // 46: proto.Musics.GetMostRecentAlbums:output_type -> proto.AlbumsList
	12, // 47: proto.Musics.GetArtist:output_type -> proto.Artist
	13, // 48: proto.Musics.GetArtists:output_type -> proto.ArtistsList
	13, // 49: proto.Musics.GetArtistsByGenre:output_type -> proto.ArtistsList
	12, // 50: proto.Musics.CreateArtist:output_type -> proto.Artist
	12, // 51: proto.Musics.UpdateArtist:output_type -> proto.Artist
	18, // 52: proto.Musics.DeleteArtist:output_type -> proto.Empty
	12, // 53: proto.Musics.FavoriteArtist:output_type -> proto.Artist
	12, // 54: proto.Musics.UnfavoriteArtist:output_type -> proto.Artist
	12, // 55: proto.Musics.FollowArtist:output_type -> proto.Artist
	12, // 56: proto.Musics.UnfollowArtist:output_type -> proto.Artist
	13, // 57: proto.Musics.GetMostFollowedArtists:output_type -> proto.ArtistsList
	34, // [34:58] is the sub-list for method output_type
	10, // [10:34] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_protos_musics_service_proto_init() }
func file_protos_musics_service_proto_init() {
	if File_protos_musics_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_musics_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Music); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMusicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMusicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMostViewedMusicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlbumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAlbumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMostRecentAlbumsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtistsByGenreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArtistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateArtistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMostFollowedArtistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_musics_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_musics_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_musics_service_proto_goTypes,
		DependencyIndexes: file_protos_musics_service_proto_depIdxs,
		EnumInfos:         file_protos_musics_service_proto_enumTypes,
		MessageInfos:      file_protos_musics_service_proto_msgTypes,
	}.Build()
	File_protos_musics_service_proto = out.File
	file_protos_musics_service_proto_rawDesc = nil
	file_protos_musics_service_proto_goTypes = nil
	file_protos_musics_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MusicsClient is the client API for Musics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MusicsClient interface {
	GetMusic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Music, error)
	GetMusics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MusicsList, error)
	CreateMusic(ctx context.Context, in *CreateMusicRequest, opts ...grpc.CallOption) (*Music, error)
	UpdateMusic(ctx context.Context, in *UpdateMusicRequest, opts ...grpc.CallOption) (*Music, error)
	DeleteMusic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ViewMusic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Music, error)
	GetMostViewedMusics(ctx context.Context, in *GetMostViewedMusicsRequest, opts ...grpc.CallOption) (*MusicsList, error)
	GetAlbum(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Album, error)
	GetAlbums(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AlbumsList, error)
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*Album, error)
	UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*Album, error)
	DeleteAlbum(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetMostRecentAlbums(ctx context.Context, in *GetMostRecentAlbumsRequest, opts ...grpc.CallOption) (*AlbumsList, error)
	GetArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error)
	GetArtists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArtistsList, error)
	GetArtistsByGenre(ctx context.Context, in *GetArtistsByGenreRequest, opts ...grpc.CallOption) (*ArtistsList, error)
	CreateArtist(ctx context.Context, in *CreateArtistRequest, opts ...grpc.CallOption) (*Artist, error)
	UpdateArtist(ctx context.Context, in *UpdateArtistRequest, opts ...grpc.CallOption) (*Artist, error)
	DeleteArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	FavoriteArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error)
	UnfavoriteArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error)
	FollowArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error)
	UnfollowArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error)
	GetMostFollowedArtists(ctx context.Context, in *GetMostFollowedArtistsRequest, opts ...grpc.CallOption) (*ArtistsList, error)
}

type musicsClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicsClient(cc grpc.ClientConnInterface) MusicsClient {
	return &musicsClient{cc}
}

func (c *musicsClient) GetMusic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Music, error) {
	out := new(Music)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) GetMusics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MusicsList, error) {
	out := new(MusicsList)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetMusics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) CreateMusic(ctx context.Context, in *CreateMusicRequest, opts ...grpc.CallOption) (*Music, error) {
	out := new(Music)
	err := c.cc.Invoke(ctx, "/proto.Musics/CreateMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) UpdateMusic(ctx context.Context, in *UpdateMusicRequest, opts ...grpc.CallOption) (*Music, error) {
	out := new(Music)
	err := c.cc.Invoke(ctx, "/proto.Musics/UpdateMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) DeleteMusic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Musics/DeleteMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) ViewMusic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Music, error) {
	out := new(Music)
	err := c.cc.Invoke(ctx, "/proto.Musics/ViewMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) GetMostViewedMusics(ctx context.Context, in *GetMostViewedMusicsRequest, opts ...grpc.CallOption) (*MusicsList, error) {
	out := new(MusicsList)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetMostViewedMusics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) GetAlbum(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) GetAlbums(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AlbumsList, error) {
	out := new(AlbumsList)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/proto.Musics/CreateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/proto.Musics/UpdateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) DeleteAlbum(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Musics/DeleteAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) GetMostRecentAlbums(ctx context.Context, in *GetMostRecentAlbumsRequest, opts ...grpc.CallOption) (*AlbumsList, error) {
	out := new(AlbumsList)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetMostRecentAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) GetArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) GetArtists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArtistsList, error) {
	out := new(ArtistsList)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) GetArtistsByGenre(ctx context.Context, in *GetArtistsByGenreRequest, opts ...grpc.CallOption) (*ArtistsList, error) {
	out := new(ArtistsList)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetArtistsByGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) CreateArtist(ctx context.Context, in *CreateArtistRequest, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/proto.Musics/CreateArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) UpdateArtist(ctx context.Context, in *UpdateArtistRequest, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/proto.Musics/UpdateArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) DeleteArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Musics/DeleteArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) FavoriteArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/proto.Musics/FavoriteArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) UnfavoriteArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/proto.Musics/UnfavoriteArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) FollowArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/proto.Musics/FollowArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) UnfollowArtist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, "/proto.Musics/UnfollowArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicsClient) GetMostFollowedArtists(ctx context.Context, in *GetMostFollowedArtistsRequest, opts ...grpc.CallOption) (*ArtistsList, error) {
	out := new(ArtistsList)
	err := c.cc.Invoke(ctx, "/proto.Musics/GetMostFollowedArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicsServer is the server API for Musics service.
type MusicsServer interface {
	GetMusic(context.Context, *Id) (*Music, error)
	GetMusics(context.Context, *Empty) (*MusicsList, error)
	CreateMusic(context.Context, *CreateMusicRequest) (*Music, error)
	UpdateMusic(context.Context, *UpdateMusicRequest) (*Music, error)
	DeleteMusic(context.Context, *Id) (*Empty, error)
	ViewMusic(context.Context, *Id) (*Music, error)
	GetMostViewedMusics(context.Context, *GetMostViewedMusicsRequest) (*MusicsList, error)
	GetAlbum(context.Context, *Id) (*Album, error)
	GetAlbums(context.Context, *Empty) (*AlbumsList, error)
	CreateAlbum(context.Context, *CreateAlbumRequest) (*Album, error)
	UpdateAlbum(context.Context, *UpdateAlbumRequest) (*Album, error)
	DeleteAlbum(context.Context, *Id) (*Empty, error)
	GetMostRecentAlbums(context.Context, *GetMostRecentAlbumsRequest) (*AlbumsList, error)
	GetArtist(context.Context, *Id) (*Artist, error)
	GetArtists(context.Context, *Empty) (*ArtistsList, error)
	GetArtistsByGenre(context.Context, *GetArtistsByGenreRequest) (*ArtistsList, error)
	CreateArtist(context.Context, *CreateArtistRequest) (*Artist, error)
	UpdateArtist(context.Context, *UpdateArtistRequest) (*Artist, error)
	DeleteArtist(context.Context, *Id) (*Empty, error)
	FavoriteArtist(context.Context, *Id) (*Artist, error)
	UnfavoriteArtist(context.Context, *Id) (*Artist, error)
	FollowArtist(context.Context, *Id) (*Artist, error)
	UnfollowArtist(context.Context, *Id) (*Artist, error)
	GetMostFollowedArtists(context.Context, *GetMostFollowedArtistsRequest) (*ArtistsList, error)
}

// UnimplementedMusicsServer can be embedded to have forward compatible implementations.
type UnimplementedMusicsServer struct {
}

func (*UnimplementedMusicsServer) GetMusic(context.Context, *Id) (*Music, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMusic not implemented")
}
func (*UnimplementedMusicsServer) GetMusics(context.Context, *Empty) (*MusicsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMusics not implemented")
}
func (*UnimplementedMusicsServer) CreateMusic(context.Context, *CreateMusicRequest) (*Music, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMusic not implemented")
}
func (*UnimplementedMusicsServer) UpdateMusic(context.Context, *UpdateMusicRequest) (*Music, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMusic not implemented")
}
func (*UnimplementedMusicsServer) DeleteMusic(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMusic not implemented")
}
func (*UnimplementedMusicsServer) ViewMusic(context.Context, *Id) (*Music, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewMusic not implemented")
}
func (*UnimplementedMusicsServer) GetMostViewedMusics(context.Context, *GetMostViewedMusicsRequest) (*MusicsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostViewedMusics not implemented")
}
func (*UnimplementedMusicsServer) GetAlbum(context.Context, *Id) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (*UnimplementedMusicsServer) GetAlbums(context.Context, *Empty) (*AlbumsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbums not implemented")
}
func (*UnimplementedMusicsServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (*UnimplementedMusicsServer) UpdateAlbum(context.Context, *UpdateAlbumRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (*UnimplementedMusicsServer) DeleteAlbum(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (*UnimplementedMusicsServer) GetMostRecentAlbums(context.Context, *GetMostRecentAlbumsRequest) (*AlbumsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostRecentAlbums not implemented")
}
func (*UnimplementedMusicsServer) GetArtist(context.Context, *Id) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtist not implemented")
}
func (*UnimplementedMusicsServer) GetArtists(context.Context, *Empty) (*ArtistsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtists not implemented")
}
func (*UnimplementedMusicsServer) GetArtistsByGenre(context.Context, *GetArtistsByGenreRequest) (*ArtistsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistsByGenre not implemented")
}
func (*UnimplementedMusicsServer) CreateArtist(context.Context, *CreateArtistRequest) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtist not implemented")
}
func (*UnimplementedMusicsServer) UpdateArtist(context.Context, *UpdateArtistRequest) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtist not implemented")
}
func (*UnimplementedMusicsServer) DeleteArtist(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtist not implemented")
}
func (*UnimplementedMusicsServer) FavoriteArtist(context.Context, *Id) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteArtist not implemented")
}
func (*UnimplementedMusicsServer) UnfavoriteArtist(context.Context, *Id) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfavoriteArtist not implemented")
}
func (*UnimplementedMusicsServer) FollowArtist(context.Context, *Id) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowArtist not implemented")
}
func (*UnimplementedMusicsServer) UnfollowArtist(context.Context, *Id) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowArtist not implemented")
}
func (*UnimplementedMusicsServer) GetMostFollowedArtists(context.Context, *GetMostFollowedArtistsRequest) (*ArtistsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostFollowedArtists not implemented")
}

func RegisterMusicsServer(s *grpc.Server, srv MusicsServer) {
	s.RegisterService(&_Musics_serviceDesc, srv)
}

func _Musics_GetMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetMusic(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_GetMusics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetMusics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetMusics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetMusics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_CreateMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).CreateMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/CreateMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).CreateMusic(ctx, req.(*CreateMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_UpdateMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).UpdateMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/UpdateMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).UpdateMusic(ctx, req.(*UpdateMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_DeleteMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).DeleteMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/DeleteMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).DeleteMusic(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_ViewMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).ViewMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/ViewMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).ViewMusic(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_GetMostViewedMusics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMostViewedMusicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetMostViewedMusics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetMostViewedMusics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetMostViewedMusics(ctx, req.(*GetMostViewedMusicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetAlbum(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_GetAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetAlbums(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/UpdateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).UpdateAlbum(ctx, req.(*UpdateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/DeleteAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).DeleteAlbum(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_GetMostRecentAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMostRecentAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetMostRecentAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetMostRecentAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetMostRecentAlbums(ctx, req.(*GetMostRecentAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_GetArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetArtist(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_GetArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetArtists(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_GetArtistsByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtistsByGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetArtistsByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetArtistsByGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetArtistsByGenre(ctx, req.(*GetArtistsByGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_CreateArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).CreateArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/CreateArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).CreateArtist(ctx, req.(*CreateArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_UpdateArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).UpdateArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/UpdateArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).UpdateArtist(ctx, req.(*UpdateArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_DeleteArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).DeleteArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/DeleteArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).DeleteArtist(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_FavoriteArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).FavoriteArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/FavoriteArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).FavoriteArtist(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_UnfavoriteArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).UnfavoriteArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/UnfavoriteArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).UnfavoriteArtist(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_FollowArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).FollowArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/FollowArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).FollowArtist(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_UnfollowArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).UnfollowArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/UnfollowArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).UnfollowArtist(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Musics_GetMostFollowedArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMostFollowedArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicsServer).GetMostFollowedArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Musics/GetMostFollowedArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicsServer).GetMostFollowedArtists(ctx, req.(*GetMostFollowedArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Musics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Musics",
	HandlerType: (*MusicsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMusic",
			Handler:    _Musics_GetMusic_Handler,
		},
		{
			MethodName: "GetMusics",
			Handler:    _Musics_GetMusics_Handler,
		},
		{
			MethodName: "CreateMusic",
			Handler:    _Musics_CreateMusic_Handler,
		},
		{
			MethodName: "UpdateMusic",
			Handler:    _Musics_UpdateMusic_Handler,
		},
		{
			MethodName: "DeleteMusic",
			Handler:    _Musics_DeleteMusic_Handler,
		},
		{
			MethodName: "ViewMusic",
			Handler:    _Musics_ViewMusic_Handler,
		},
		{
			MethodName: "GetMostViewedMusics",
			Handler:    _Musics_GetMostViewedMusics_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _Musics_GetAlbum_Handler,
		},
		{
			MethodName: "GetAlbums",
			Handler:    _Musics_GetAlbums_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _Musics_CreateAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _Musics_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _Musics_DeleteAlbum_Handler,
		},
		{
			MethodName: "GetMostRecentAlbums",
			Handler:    _Musics_GetMostRecentAlbums_Handler,
		},
		{
			MethodName: "GetArtist",
			Handler:    _Musics_GetArtist_Handler,
		},
		{
			MethodName: "GetArtists",
			Handler:    _Musics_GetArtists_Handler,
		},
		{
			MethodName: "GetArtistsByGenre",
			Handler:    _Musics_GetArtistsByGenre_Handler,
		},
		{
			MethodName: "CreateArtist",
			Handler:    _Musics_CreateArtist_Handler,
		},
		{
			MethodName: "UpdateArtist",
			Handler:    _Musics_UpdateArtist_Handler,
		},
		{
			MethodName: "DeleteArtist",
			Handler:    _Musics_DeleteArtist_Handler,
		},
		{
			MethodName: "FavoriteArtist",
			Handler:    _Musics_FavoriteArtist_Handler,
		},
		{
			MethodName: "UnfavoriteArtist",
			Handler:    _Musics_UnfavoriteArtist_Handler,
		},
		{
			MethodName: "FollowArtist",
			Handler:    _Musics_FollowArtist_Handler,
		},
		{
			MethodName: "UnfollowArtist",
			Handler:    _Musics_UnfollowArtist_Handler,
		},
		{
			MethodName: "GetMostFollowedArtists",
			Handler:    _Musics_GetMostFollowedArtists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/musics_service.proto",
}
